generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @unique // matches kinde user id
  email String @unique

  files        File[]
  messages     Message[]
  fileGroups   FileGroup[]

  stripeCustomerId       String?   @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?   @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map(name: "stripe_current_period_end")
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model FileGroup {
  id        String   @id
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  uploadStatus UploadStatus @default(PENDING)
  files     File[]

  userId    String?
  user      User?    @relation(fields: [userId], references: [id])

  messages   Message[]

}

model File {
  id           String       @id @default(cuid())
  name         String
  uploadStatus UploadStatus @default(PENDING)
  url          String
  key          String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId    String?
  user      User?        @relation(fields: [userId], references: [id])

  fileGroupId String?
  fileGroup   FileGroup? @relation(fields: [fileGroupId], references: [id])

}

model Message {
  id            String   @id @default(cuid())
  text          String   @db.Text()
  isUserMessage Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userId  String?
  user    User?    @relation(fields: [userId], references: [id])

  fileGroupId  String?
  fileGroup    FileGroup?    @relation(fields: [fileGroupId], references: [id])
}
